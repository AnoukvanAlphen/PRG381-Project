
package view.pages;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;


public class AppointmentsForm extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(AppointmentsForm.class.getName());

 
    public AppointmentsForm() {
        initComponents();
        loadCounselorsIntoComboBox();
        tblAppointments.getSelectionModel().addListSelectionListener(event -> {
    if (!event.getValueIsAdjusting() && tblAppointments.getSelectedRow() != -1) {
        populateFormFromSelectedRow();
    }
});
    }
    
    private void populateFormFromSelectedRow() {
    int selectedRow = tblAppointments.getSelectedRow();
    if (selectedRow == -1) return;

    String name = (String) tblAppointments.getValueAt(selectedRow, 0);
    String surname = (String) tblAppointments.getValueAt(selectedRow, 1);
    String counselor = (String) tblAppointments.getValueAt(selectedRow, 2);
    String date = (String) tblAppointments.getValueAt(selectedRow, 3);
    String time = (String) tblAppointments.getValueAt(selectedRow, 4);

    txtName.setText(name);
    txtName.setForeground(java.awt.Color.BLACK);

    txtSurname.setText(surname);
    txtSurname.setForeground(java.awt.Color.BLACK);

    txtDate.setText(date);
    txtDate.setForeground(java.awt.Color.BLACK);

    txtTime.setText(time.substring(0, 5)); // HH:mm
    txtTime.setForeground(java.awt.Color.BLACK);

    cmbCounselor.setSelectedItem(counselor);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        javax.swing.JLabel lblName = new javax.swing.JLabel();
        javax.swing.JLabel lblSurname = new javax.swing.JLabel();
        javax.swing.JLabel lblDate = new javax.swing.JLabel();
        javax.swing.JLabel lblTime = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtSurname = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        txtTime = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointments = new javax.swing.JTable();
        javax.swing.JLabel lblCounselor = new javax.swing.JLabel();
        cmbCounselor = new javax.swing.JComboBox<>();
        btnBook = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setForeground(new java.awt.Color(0, 102, 102));

        jPanel4.setBackground(new java.awt.Color(0, 51, 51));

        lblHeading.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading.setText("Appointments");

        lblName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("Name:");

        lblSurname.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSurname.setForeground(new java.awt.Color(255, 255, 255));
        lblSurname.setText("Surname:");

        lblDate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setText("Date:");

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.setText("Time:");

        txtName.setForeground(new java.awt.Color(204, 204, 204));
        txtName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtName.setText("Enter Name");
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtSurname.setForeground(new java.awt.Color(204, 204, 204));
        txtSurname.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSurname.setText("Enter Surname");
        txtSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSurnameActionPerformed(evt);
            }
        });

        txtDate.setForeground(new java.awt.Color(204, 204, 204));
        txtDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDate.setText("YYYY-MM-DD");
        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        txtTime.setForeground(new java.awt.Color(204, 204, 204));
        txtTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTime.setText("HH:MM");
        txtTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeActionPerformed(evt);
            }
        });

        tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Surname", "Counselor", "Date", "Time", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblAppointments);

        lblCounselor.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCounselor.setForeground(new java.awt.Color(255, 255, 255));
        lblCounselor.setText("Counselor:");

        cmbCounselor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCounselorActionPerformed(evt);
            }
        });

        btnBook.setText("Book  Appointment");
        btnBook.setActionCommand("Book Appointment");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        btnView.setText("Upcomming Appointments");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Appointment ");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel Appointment");
        btnCancel.setToolTipText("");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSurname)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblCounselor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(97, 97, 97))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(btnBook)
                                    .addGap(55, 55, 55)
                                    .addComponent(btnView)))
                            .addGap(41, 41, 41)
                            .addComponent(btnUpdate)
                            .addGap(47, 47, 47)))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSurname)
                            .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCounselor)
                            .addComponent(cmbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDate)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTime)
                            .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblHeading)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(189, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(423, 423, 423))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
   

    
    private void loadAppointmentsTable() {
    try {
        Connection con = db.DatabaseConnection.getInstance().getConnection();
        String sql = "SELECT name, surname, counselor, date, time, status FROM appointments";
        PreparedStatement stmt = con.prepareStatement(sql);
        java.sql.ResultSet rs = stmt.executeQuery();

        // Clear the existing rows in the table
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblAppointments.getModel();
        model.setRowCount(0);

        // Add rows from database
        while (rs.next()) {
            Object[] row = {
                rs.getString("name"),
                rs.getString("surname"),
                rs.getString("counselor"),
                rs.getDate("date").toString(),
                rs.getTime("time").toString(),
                rs.getString("status")
            };
            model.addRow(row);
        }

        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading appointments: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
}
    private void loadCounselorsIntoComboBox() {
    try {
        Connection con = db.DatabaseConnection.getInstance().getConnection();
        String sql = "SELECT name, surname FROM counselors";
        PreparedStatement stmt = con.prepareStatement(sql);
        java.sql.ResultSet rs = stmt.executeQuery();

        cmbCounselor.removeAllItems(); //Clear old items

        while (rs.next()) {
            String fullName = rs.getString("name") + " " + rs.getString("surname");
            cmbCounselor.addItem(fullName);
        }

        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading counselors: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
}
    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
    String name = txtName.getText().trim();
    String surname = txtSurname.getText().trim();
    String date = txtDate.getText().trim();
    String timeInput = txtTime.getText().trim();
    String counselor = (String) cmbCounselor.getSelectedItem();

    if (name.isEmpty() || surname.isEmpty() || date.isEmpty() || timeInput.isEmpty() || counselor == null || counselor.trim().isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please fill in all the fields", "Missing information", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Name and surname validation
    if (!name.matches("[A-Z][a-zA-Z]*")) {
        javax.swing.JOptionPane.showMessageDialog(this, "Name must start with a capital letter and contain only letters.", "Invalid Name", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!surname.matches("[A-Z][a-zA-Z]*")) {
        javax.swing.JOptionPane.showMessageDialog(this, "Surname must start with a capital letter and contain only letters.", "Invalid Surname", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Date format
    if (!date.matches("\\d{4}-\\d{2}-\\d{2}")) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please enter the date in YYYY-MM-DD format", "Invalid Date", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Time format
    if (!timeInput.matches("\\d{2}:\\d{2}")) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please enter time in HH:MM format", "Invalid Time", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!timeInput.endsWith(":00")) {
        JOptionPane.showMessageDialog(this, "Appointments can only be booked on the hour (e.g., 14:00)", "Invalid Time Slot", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int hour = Integer.parseInt(timeInput.split(":")[0]);
    if (hour < 8 || hour > 17) {
        JOptionPane.showMessageDialog(this, "Appointment time must be between 08:00 and 17:00", "Out of Working Hours", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        java.time.LocalDate appointmentDate = java.time.LocalDate.parse(date);
        java.time.LocalTime appointmentTime = java.time.LocalTime.parse(timeInput);
        java.time.LocalDateTime appointmentDateTime = java.time.LocalDateTime.of(appointmentDate, appointmentTime);

        java.time.LocalDateTime now = java.time.LocalDateTime.now();

        if (appointmentDateTime.isBefore(now)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot book an appointment in the past.", "Invalid Appointment Time", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (java.time.format.DateTimeParseException e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Invalid date or time format.", "Parse Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Append :00 to time if needed
    timeInput += ":00";

    try {
        Connection con = db.DatabaseConnection.getInstance().getConnection();

        //Check for existing appointment for same counselor, date & time
        String checkSql = "SELECT COUNT(*) FROM appointments WHERE counselor = ? AND date = ? AND time = ?";
        PreparedStatement checkStmt = con.prepareStatement(checkSql);
        checkStmt.setString(1, counselor);
        checkStmt.setDate(2, java.sql.Date.valueOf(date));
        checkStmt.setTime(3, java.sql.Time.valueOf(timeInput));
        ResultSet rs = checkStmt.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "This counselor already has an appointment at that time.", "Duplicate Appointment", javax.swing.JOptionPane.WARNING_MESSAGE);
            checkStmt.close();
            return;
        }
        checkStmt.close();

        // Proceed to insert
        String sql = "INSERT INTO appointments (name, surname, counselor, date, time, status) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = con.prepareStatement(sql);
        stmt.setString(1, name);
        stmt.setString(2, surname);
        stmt.setString(3, counselor);
        stmt.setDate(4, java.sql.Date.valueOf(date));
        stmt.setTime(5, java.sql.Time.valueOf(timeInput));
        stmt.setString(6, "Pending");
        stmt.executeUpdate();
        stmt.close();

        javax.swing.JOptionPane.showMessageDialog(this, "Appointment booked successfully!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error booking appointment: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    loadAppointmentsTable(); // Refresh table
        
    }//GEN-LAST:event_btnBookActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
     int selectedRow = tblAppointments.getSelectedRow();

    if (selectedRow == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please select an appointment to cancel.", "No Selection", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Check if it's already cancelled
    String currentStatus = (String) tblAppointments.getValueAt(selectedRow, 5);
    if ("Cancelled".equalsIgnoreCase(currentStatus)) {
        javax.swing.JOptionPane.showMessageDialog(this, "This appointment is already cancelled.", "Already Cancelled", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    int choice = javax.swing.JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to cancel this appointment?",
        "Confirm Cancellation",
        javax.swing.JOptionPane.YES_NO_OPTION
    );

    if (choice != javax.swing.JOptionPane.YES_OPTION) {
        return; // User clicked "No"
    }

    // Get values from selected row
    String name = (String) tblAppointments.getValueAt(selectedRow, 0);
    String surname = (String) tblAppointments.getValueAt(selectedRow, 1);
    String counselor = (String) tblAppointments.getValueAt(selectedRow, 2);
    String date = (String) tblAppointments.getValueAt(selectedRow, 3);
    String time = (String) tblAppointments.getValueAt(selectedRow, 4); // format: HH:mm:ss

    try {
        Connection con = db.DatabaseConnection.getInstance().getConnection();
        String sql = "UPDATE appointments SET status = 'Cancelled' WHERE name = ? AND surname = ? AND counselor = ? AND date = ? AND time = ?";
        PreparedStatement stmt = con.prepareStatement(sql);
        stmt.setString(1, name);
        stmt.setString(2, surname);
        stmt.setString(3, counselor);
        stmt.setDate(4, java.sql.Date.valueOf(date));
        stmt.setTime(5, java.sql.Time.valueOf(time));

        int rowsAffected = stmt.executeUpdate();
        stmt.close();

        if (rowsAffected > 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Appointment successfully cancelled.", "Cancelled", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            loadAppointmentsTable(); // Refresh the table
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "No matching appointment found.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error cancelling appointment: " + e.getMessage(), "Database Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

   
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSurnameActionPerformed

    private void cmbCounselorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCounselorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCounselorActionPerformed

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
           try {
        Connection con = db.DatabaseConnection.getInstance().getConnection();
        
        String sql = "SELECT name, surname, counselor, date, time, status " +
                     "FROM appointments " +
                     "WHERE date > CURRENT_DATE " +
                     "OR (date = CURRENT_DATE AND time >= CURRENT_TIME)";
        
        PreparedStatement stmt = con.prepareStatement(sql);
        java.sql.ResultSet rs = stmt.executeQuery();

        // Clear existing table rows
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblAppointments.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            Object[] row = {
                rs.getString("name"),
                rs.getString("surname"),
                rs.getString("counselor"),
                rs.getDate("date").toString(),
                rs.getTime("time").toString(),
                rs.getString("status")
            };
            model.addRow(row);
        }

        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading upcoming appointments: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
         int selectedRow = tblAppointments.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an appointment to update.", "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Get status first
    String currentStatus = (String) tblAppointments.getValueAt(selectedRow, 5);
    if ("Cancelled".equalsIgnoreCase(currentStatus)) {
        JOptionPane.showMessageDialog(this, "You cannot update a cancelled appointment.", "Invalid Operation", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Get updated values
    String name = txtName.getText().trim();
    String surname = txtSurname.getText().trim();
    String date = txtDate.getText().trim();
    String timeInput = txtTime.getText().trim();
    String counselor = (String) cmbCounselor.getSelectedItem();

    // Validate fields
    if (name.isEmpty() || surname.isEmpty() || date.isEmpty() || timeInput.isEmpty() || counselor == null || counselor.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the fields", "Missing Information", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (!name.matches("[A-Z][a-zA-Z]*")) {
        JOptionPane.showMessageDialog(this, "Name must start with a capital letter and contain only letters.", "Invalid Name", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!surname.matches("[A-Z][a-zA-Z]*")) {
        JOptionPane.showMessageDialog(this, "Surname must start with a capital letter and contain only letters.", "Invalid Surname", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!date.matches("\\d{4}-\\d{2}-\\d{2}")) {
        JOptionPane.showMessageDialog(this, "Please enter the date in YYYY-MM-DD format", "Invalid Date", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!timeInput.matches("\\d{2}:\\d{2}")) {
        JOptionPane.showMessageDialog(this, "Please enter time in HH:MM format", "Invalid Time", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!timeInput.endsWith(":00")) {
        JOptionPane.showMessageDialog(this, "Appointments can only be booked on the hour (e.g., 14:00)", "Invalid Time Slot", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int hour = Integer.parseInt(timeInput.split(":")[0]);
    if (hour < 8 || hour > 17) {
        JOptionPane.showMessageDialog(this, "Appointment time must be between 08:00 and 17:00", "Out of Working Hours", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        LocalDate appointmentDate = LocalDate.parse(date);
        LocalTime appointmentTime = LocalTime.parse(timeInput);
        LocalDateTime appointmentDateTime = LocalDateTime.of(appointmentDate, appointmentTime);
        LocalDateTime now = LocalDateTime.now();

        if (appointmentDateTime.isBefore(now)) {
            JOptionPane.showMessageDialog(this, "You cannot update to a time in the past.", "Invalid Time", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (DateTimeParseException e) {
        JOptionPane.showMessageDialog(this, "Invalid date or time format.", "Parse Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    timeInput += ":00"; // For DB

    try {
        Connection con = db.DatabaseConnection.getInstance().getConnection();

        // Get current values from selected row (to identify the original record)
        String oldName = (String) tblAppointments.getValueAt(selectedRow, 0);
        String oldSurname = (String) tblAppointments.getValueAt(selectedRow, 1);
        String oldCounselor = (String) tblAppointments.getValueAt(selectedRow, 2);
        String oldDate = (String) tblAppointments.getValueAt(selectedRow, 3);
        String oldTime = (String) tblAppointments.getValueAt(selectedRow, 4);

        //Check for duplicate appointment for same counselor, date, time (excluding current one)
        String checkSql = "SELECT COUNT(*) FROM appointments WHERE counselor = ? AND date = ? AND time = ? " +
                          "AND NOT (name = ? AND surname = ? AND counselor = ? AND date = ? AND time = ?)";
        PreparedStatement checkStmt = con.prepareStatement(checkSql);
        checkStmt.setString(1, counselor);
        checkStmt.setDate(2, java.sql.Date.valueOf(date));
        checkStmt.setTime(3, java.sql.Time.valueOf(timeInput));
        checkStmt.setString(4, oldName);
        checkStmt.setString(5, oldSurname);
        checkStmt.setString(6, oldCounselor);
        checkStmt.setDate(7, java.sql.Date.valueOf(oldDate));
        checkStmt.setTime(8, java.sql.Time.valueOf(oldTime));

        ResultSet rs = checkStmt.executeQuery();
        if (rs.next() && rs.getInt(1) > 0) {
            JOptionPane.showMessageDialog(this, "This counselor already has an appointment at that time.", "Conflict", JOptionPane.WARNING_MESSAGE);
            checkStmt.close();
            return;
        }
        checkStmt.close();

        // Update
        String updateSql = "UPDATE appointments SET name = ?, surname = ?, counselor = ?, date = ?, time = ? WHERE name = ? AND surname = ? AND counselor = ? AND date = ? AND time = ?";
        PreparedStatement stmt = con.prepareStatement(updateSql);
        stmt.setString(1, name);
        stmt.setString(2, surname);
        stmt.setString(3, counselor);
        stmt.setDate(4, java.sql.Date.valueOf(date));
        stmt.setTime(5, java.sql.Time.valueOf(timeInput));
        stmt.setString(6, oldName);
        stmt.setString(7, oldSurname);
        stmt.setString(8, oldCounselor);
        stmt.setDate(9, java.sql.Date.valueOf(oldDate));
        stmt.setTime(10, java.sql.Time.valueOf(oldTime));

        int rowsAffected = stmt.executeUpdate();
        stmt.close();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Appointment updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadAppointmentsTable(); // Refresh
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update appointment.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating appointment: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(() -> new AppointmentsForm().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cmbCounselor;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSurname;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables
}
